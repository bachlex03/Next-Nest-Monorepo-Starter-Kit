services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - '${PORT}:${PORT}'
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - AT_JWT_SECRET=${AT_JWT_SECRET}
      - RT_JWT_SECRET=${RT_JWT_SECRET}
      - AT_EXPIRE_IN=${AT_EXPIRE_IN}
      - RT_EXPIRE_IN=${RT_EXPIRE_IN}
      - REDIS_HOST=${REDIS_HOST:-redis_host}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres_host}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST:-postgres_host}:${POSTGRES_PORT:-5432}/${POSTGRES_DB}?schema=public
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      postgres_host:
        condition: service_healthy
      redis_host:
        condition: service_started
    networks:
      - app-network

  postgres_host:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis_host:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
